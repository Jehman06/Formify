{"ast":null,"code":"var _jsxFileName = \"/Users/jeremylehmann/Desktop/Software Development/Personal projects/form-api/frontend/src/contexts/user.context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\";\n\n// Creating a Realm App Instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new App(APP_ID);\n\n// Creating a user context to manage and access all the user related functions\n// across different components and pages.\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Function to log in user into the App Service using their email & password\n  const emailPasswordLogin = async (email, password) => {\n    const credentials = Credentials.emailPassword(email, password);\n    const authenticatedUser = await app.logIn(credentials);\n    setUser(authenticatedUser);\n    console.log(authenticatedUser);\n    return authenticatedUser;\n  };\n\n  // Function to sign up user into the App Service using their email & password\n  const emailPasswordSignup = async (email, password) => {\n    try {\n      await app.emailPasswordAuth.registerUser(email, password);\n      // Since we are automatically confirming our users, we are going to log in\n      // the user using the same credentials once the signup is complete.\n      return emailPasswordLogin(email, password);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to fetch the user (if the user is already logged in) from local storage\n  const fetchUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.refreshCustomData();\n      // Now, if we have a user, we are setting it to our user context\n      // so that we can use it in our app across different components.\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to logout user from our App Services app\n  const logOutUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.logOut();\n      // Setting the user to null once loggedOut.\n      setUser(null);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      app,\n      user,\n      setUser,\n      fetchUser,\n      emailPasswordLogin,\n      emailPasswordSignup,\n      logOutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n};\n_s(UserProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useState","App","Credentials","APP_ID","jsxDEV","_jsxDEV","app","UserContext","UserProvider","children","_s","user","setUser","emailPasswordLogin","email","password","credentials","emailPassword","authenticatedUser","logIn","console","log","emailPasswordSignup","emailPasswordAuth","registerUser","error","fetchUser","currentUser","refreshCustomData","logOutUser","logOut","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jeremylehmann/Desktop/Software Development/Personal projects/form-api/frontend/src/contexts/user.context.js"],"sourcesContent":["import { createContext, useState } from \"react\";\nimport { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\";\n\n// Creating a Realm App Instance\nconst app = new App(APP_ID);\n\n// Creating a user context to manage and access all the user related functions\n// across different components and pages.\nexport const UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n\n    // Function to log in user into the App Service using their email & password\n    const emailPasswordLogin = async (email, password) => {\n        const credentials = Credentials.emailPassword(email, password);\n        const authenticatedUser = await app.logIn(credentials);\n        setUser(authenticatedUser);\n        console.log(authenticatedUser)\n        return authenticatedUser;\n    };\n\n    // Function to sign up user into the App Service using their email & password\n    const emailPasswordSignup = async (email, password) => {\n        try {\n            await app.emailPasswordAuth.registerUser(email, password);\n            // Since we are automatically confirming our users, we are going to log in\n            // the user using the same credentials once the signup is complete.\n            return emailPasswordLogin(email, password);\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    // Function to fetch the user (if the user is already logged in) from local storage\n    const fetchUser = async () => {\n        if (!app.currentUser) return false;\n        try {\n            await app.currentUser.refreshCustomData();\n            // Now, if we have a user, we are setting it to our user context\n            // so that we can use it in our app across different components.\n            setUser(app.currentUser);\n            return app.currentUser;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    // Function to logout user from our App Services app\n    const logOutUser = async () => {\n        if (!app.currentUser) return false;\n        try {\n            await app.currentUser.logOut();\n            // Setting the user to null once loggedOut.\n            setUser(null);\n            return true;\n        } catch (error) {\n            throw error\n        }\n    }\n\n    return <UserContext.Provider\n        value={{\n            app,\n            user,\n            setUser,\n            fetchUser,\n            emailPasswordLogin,\n            emailPasswordSignup,\n            logOutUser\n        }}\n    >\n        {children}\n    </UserContext.Provider>;\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,GAAG,EAAEC,WAAW,QAAQ,WAAW;AAC5C,SAASC,MAAM,QAAQ,oBAAoB;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GAAG,IAAIL,GAAG,CAACE,MAAM,CAAC;;AAE3B;AACA;AACA,OAAO,MAAMI,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMa,kBAAkB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAClD,MAAMC,WAAW,GAAGd,WAAW,CAACe,aAAa,CAACH,KAAK,EAAEC,QAAQ,CAAC;IAC9D,MAAMG,iBAAiB,GAAG,MAAMZ,GAAG,CAACa,KAAK,CAACH,WAAW,CAAC;IACtDJ,OAAO,CAACM,iBAAiB,CAAC;IAC1BE,OAAO,CAACC,GAAG,CAACH,iBAAiB,CAAC;IAC9B,OAAOA,iBAAiB;EAC5B,CAAC;;EAED;EACA,MAAMI,mBAAmB,GAAG,MAAAA,CAAOR,KAAK,EAAEC,QAAQ,KAAK;IACnD,IAAI;MACA,MAAMT,GAAG,CAACiB,iBAAiB,CAACC,YAAY,CAACV,KAAK,EAAEC,QAAQ,CAAC;MACzD;MACA;MACA,OAAOF,kBAAkB,CAACC,KAAK,EAAEC,QAAQ,CAAC;IAC9C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI,CAACpB,GAAG,CAACqB,WAAW,EAAE,OAAO,KAAK;IAClC,IAAI;MACA,MAAMrB,GAAG,CAACqB,WAAW,CAACC,iBAAiB,CAAC,CAAC;MACzC;MACA;MACAhB,OAAO,CAACN,GAAG,CAACqB,WAAW,CAAC;MACxB,OAAOrB,GAAG,CAACqB,WAAW;IAC1B,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;;EAED;EACA,MAAMI,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI,CAACvB,GAAG,CAACqB,WAAW,EAAE,OAAO,KAAK;IAClC,IAAI;MACA,MAAMrB,GAAG,CAACqB,WAAW,CAACG,MAAM,CAAC,CAAC;MAC9B;MACAlB,OAAO,CAAC,IAAI,CAAC;MACb,OAAO,IAAI;IACf,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZ,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,oBAAOpB,OAAA,CAACE,WAAW,CAACwB,QAAQ;IACxBC,KAAK,EAAE;MACH1B,GAAG;MACHK,IAAI;MACJC,OAAO;MACPc,SAAS;MACTb,kBAAkB;MAClBS,mBAAmB;MACnBO;IACJ,CAAE;IAAApB,QAAA,EAEDA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAC3B,CAAC;AAAA1B,EAAA,CAhEYF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
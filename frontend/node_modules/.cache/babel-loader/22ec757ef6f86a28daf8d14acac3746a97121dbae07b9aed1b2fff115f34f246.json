{"ast":null,"code":"var _jsxFileName = \"/Users/jeremylehmann/Desktop/Software Development/Personal projects/form-api/frontend/src/pages/Login.page.js\",\n  _s = $RefreshSig$();\nimport { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { UserContext } from \"../contexts/user.context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // We are using our user-management context to\n  // get & set the user details here\n  const {\n    user,\n    fetchUser,\n    emailPasswordLogin\n  } = useContext(UserContext);\n\n  // We are useState to keep track of the form values.\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // This function will be called whenever the user edits the form.\n  const onFormInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setForm({\n      ...form,\n      [name]: value\n    });\n  };\n\n  // This function will redirect the user to the\n  // appropriate page once the authentication is done.\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  };\n\n  // Once a user logs in to our app, we don’t want to ask them for their\n  // credentials again every time the user refreshes or revisits our app, \n  // so we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  };\n\n  // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  // This function is called when the user clicks on the \"Login\" button.\n  const onSubmit = async event => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and log in the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      if (error.statusCode === 401) {\n        alert(\"Invalid username/password. Try again!\");\n      } else {\n        alert(error);\n      }\n    }\n  };\n\n  // Redirects to the page\n  const resetPasswordNav = () => {\n    navigate('/reset-password');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      maxWidth: \"300px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Email\",\n      type: \"email\",\n      variant: \"outlined\",\n      name: \"email\",\n      value: form.email,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Password\",\n      type: \"password\",\n      variant: \"outlined\",\n      name: \"password\",\n      value: form.password,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: onSubmit,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: resetPasswordNav,\n      style: {\n        color: 'rgba(var(--bs-link-color-rgb)',\n        textDecoration: 'underline'\n      },\n      children: \"Forgot your password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/signup\",\n        children: \"Signup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 12\n  }, this);\n};\n_s(Login, \"p/mcA9Fr0oyJMK7JyQYbiJoZx6A=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Button","TextField","useContext","useEffect","useState","Link","useLocation","useNavigate","UserContext","jsxDEV","_jsxDEV","Login","_s","navigate","location","user","fetchUser","emailPasswordLogin","form","setForm","email","password","onFormInputChange","event","name","value","target","redirectNow","redirectTo","search","replace","loadUser","fetchedUser","onSubmit","error","statusCode","alert","resetPasswordNav","style","display","flexDirection","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","label","type","variant","onChange","marginBottom","color","onClick","textDecoration","to","_c","$RefreshReg$"],"sources":["/Users/jeremylehmann/Desktop/Software Development/Personal projects/form-api/frontend/src/pages/Login.page.js"],"sourcesContent":["import { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { UserContext } from \"../contexts/user.context\";\n\nconst Login = () => {\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    // We are using our user-management context to\n    // get & set the user details here\n    const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\n\n    // We are useState to keep track of the form values.\n    const [form, setForm] = useState({\n        email: \"\",\n        password: \"\"\n    });\n\n    // This function will be called whenever the user edits the form.\n    const onFormInputChange = (event) => {\n        const { name, value } = event.target;\n        setForm({ ...form, [name]: value });\n    };\n\n    // This function will redirect the user to the\n    // appropriate page once the authentication is done.\n    const redirectNow = () => {\n        const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n        navigate(redirectTo ? redirectTo : \"/\");\n    }\n\n    // Once a user logs in to our app, we don’t want to ask them for their\n    // credentials again every time the user refreshes or revisits our app, \n    // so we are checking if the user is already logged in and\n    // if so we are redirecting the user to the home page.\n    // Otherwise we will do nothing and let the user to login.\n    const loadUser = async () => {\n        if (!user) {\n            const fetchedUser = await fetchUser();\n            if (fetchedUser) {\n                // Redirecting them once fetched.\n                redirectNow();\n            }\n        }\n    }\n\n    // This useEffect will run only once when the component is mounted.\n    // Hence this is helping us in verifying whether the user is already logged in\n    // or not.\n    useEffect(() => {\n        loadUser();\n    }, []);\n\n    // This function is called when the user clicks on the \"Login\" button.\n    const onSubmit = async (event) => {\n        try {\n            // Here we are passing user details to our emailPasswordLogin\n            // function that we imported from our realm/authentication.js\n            // to validate the user credentials and log in the user into our App.\n            const user = await emailPasswordLogin(form.email, form.password);\n            if (user) {\n                redirectNow();\n            }\n        } catch (error) {\n            if (error.statusCode === 401) {\n                alert(\"Invalid username/password. Try again!\");\n            } else {\n                alert(error);\n            }\n        }\n    };\n\n    // Redirects to the page\n    const resetPasswordNav = () => {\n        navigate('/reset-password')\n    }\n\n    return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\n        <h1>Login</h1>\n        <TextField\n            label=\"Email\"\n            type=\"email\"\n            variant=\"outlined\"\n            name=\"email\"\n            value={form.email}\n            onChange={onFormInputChange}\n            style={{ marginBottom: \"1rem\" }}\n        />\n        <TextField\n            label=\"Password\"\n            type=\"password\"\n            variant=\"outlined\"\n            name=\"password\"\n            value={form.password}\n            onChange={onFormInputChange}\n            style={{ marginBottom: \"1rem\" }}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n            Login\n        </Button>\n        <p onClick={resetPasswordNav} style={{ color: 'rgba(var(--bs-link-color-rgb)', textDecoration: 'underline' }}>Forgot your password?</p>\n        <p>Don't have an account? <Link to=\"/signup\">Signup</Link></p>\n    </form>\n}\n\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}